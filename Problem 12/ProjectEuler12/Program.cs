using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
//using System.Windows.Form;

namespace ProjectEuler12
{
    class Program
    {
        // Problem 12 
        // Highly divisible triangular number
        // The sequence of triangle numbers is generated by adding the natural numbers. 
        // So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
        // 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        // Let us list the factors of the first seven triangle numbers:
        /* 1: 1
           3: 1,3
           6: 1,2,3,6
           10: 1,2,5,10
           15: 1,3,5,15
           21: 1,3,7,21
           28: 1,2,4,7,14,28 */
        // We can see that 28 is the first triangle number to have over five divisors.
        // What is the value of the first triangle number to have over five hundred divisors?
        static void Main(string[] args)
        {
            var timer = Stopwatch.StartNew();
            int i = 1;
            int triangleNumber;

            do
            {
                triangleNumber = 0;
                
                for (int j = 1; j <= i ; j++)
                {
                    triangleNumber += j;
                }
                i++;
            } while (GetDivisors(triangleNumber).Length < 500);
            
            timer.Stop();
            Console.WriteLine("Number {0} has {1} divisors", triangleNumber, GetDivisors(triangleNumber).Length);
            Console.Write("Elapsed time: {0} ms", timer.ElapsedMilliseconds);
            Console.ReadKey();
        }
        static int[] GetDivisors(int n)
        {
            var divisors = new List<int>() { 1, n }; //All numbers are divisble by themselves and 1 so we can add that from the start

            // One is a special case
            if (n == 1)
            {
                return new int[] { 1 };
            }

            // We only need to loop up to sqrt(n) we can generate the other factors through division
            for (int i = 2; i <= Math.Sqrt(n); i++)
            {
                if (n % i == 0)
                {
                    divisors.Add(i);
                    divisors.Add(n / i);
                }
            }

            return divisors.ToArray();
        }
    }
}
